#! /bin/sh /usr/share/dpatch/dpatch-run
## sql_timer_cb.dpatch by Francesco Paolo Lovergine <frankie@debian.org>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: No description.

@DPATCH@
diff -urNad trunk~/contrib/mod_sql_mysql.c trunk/contrib/mod_sql_mysql.c
--- trunk~/contrib/mod_sql_mysql.c	2008-01-07 09:50:59.000000000 +0100
+++ trunk/contrib/mod_sql_mysql.c	2008-01-07 09:53:06.000000000 +0100
@@ -1,7 +1,7 @@
 /*
  * ProFTPD: mod_sql_mysql -- Support for connecting to MySQL databases.
  * Copyright (c) 2001 Andrew Houghton
- * Copyright (c) 2004-2007 TJ Saunders
+ * Copyright (c) 2004-2008 TJ Saunders
  *  
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -265,17 +265,16 @@
 }
 
 /*
- * _sql_timer_callback: when a timer goes off, this is the function
- *  that gets called.  This function makes assumptions about the 
- *  db_conn_t members.
+ * sql_timer_cb: when a timer goes off, this is the function that gets called.
+ * This function makes assumptions about the db_conn_t members.
  */
-static int _sql_timer_callback(CALLBACK_FRAME) {
+static int sql_timer_cb(CALLBACK_FRAME) {
   conn_entry_t *entry = NULL;
-  int cnt = 0;
+  int i = 0;
   cmd_rec *cmd = NULL;
  
-  for (cnt=0; cnt < conn_cache->nelts; cnt++) {
-    entry = ((conn_entry_t **) conn_cache->elts)[cnt];
+  for (i = 0; i < conn_cache->nelts; i++) {
+    entry = ((conn_entry_t **) conn_cache->elts)[i];
 
     if (entry->timer == p2) {
       sql_log(DEBUG_INFO, "timer expired for connection '%s'", entry->name);
@@ -447,7 +446,7 @@
   /* set up our timer if necessary */
   if (entry->ttl > 0) {
     entry->timer = pr_timer_add(entry->ttl, -1, &sql_mysql_module,
-      _sql_timer_callback);
+      sql_timer_cb);
     sql_log(DEBUG_INFO, "connection '%s' - %d second timer started",
       entry->name, entry->ttl);
 
@@ -1229,6 +1228,7 @@
 MODRET cmd_escapestring(cmd_rec * cmd) {
   conn_entry_t *entry = NULL;
   db_conn_t *conn = NULL;
+  modret_t *cmr = NULL;
   char *unescaped = NULL;
   char *escaped = NULL;
 
@@ -1250,6 +1250,13 @@
 
   conn = (db_conn_t *) entry->data;
 
+  /* Make sure the connection is open. */
+  cmr = cmd_open(cmd);
+  if (MODRET_ERROR(cmr)) {
+    sql_log(DEBUG_FUNC, "%s", "existing \tmysql cmd_escapestring");
+    return cmr;
+  }
+
   unescaped = cmd->argv[1];
   escaped = (char *) pcalloc(cmd->tmp_pool, sizeof(char) *
     (strlen(unescaped) * 2) + 1);
diff -urNad trunk~/contrib/mod_sql_postgres.c trunk/contrib/mod_sql_postgres.c
--- trunk~/contrib/mod_sql_postgres.c	2007-10-09 23:45:04.000000000 +0200
+++ trunk/contrib/mod_sql_postgres.c	2008-01-07 09:53:39.000000000 +0100
@@ -2,7 +2,7 @@
  * ProFTPD: mod_sql_postgres -- Support for connecting to Postgres databases.
  * Time-stamp: <1999-10-04 03:21:21 root>
  * Copyright (c) 2001 Andrew Houghton
- * Copyright (c) 2004-2007 TJ Saunders
+ * Copyright (c) 2004-2008 TJ Saunders
  *  
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -168,17 +168,16 @@
 }
 
 /*
- * _sql_timer_callback: when a timer goes off, this is the function
- *  that gets called.  This function makes assumptions about the 
- *  db_conn_t members.
+ * sql_timer_cb: when a timer goes off, this is the function that gets called.
+ * This function makes assumptions about the db_conn_t members.
  */
-static int _sql_timer_callback(CALLBACK_FRAME) {
+static int sql_timer_cb(CALLBACK_FRAME) {
   conn_entry_t *entry = NULL;
-  int cnt = 0;
+  int i = 0;
   cmd_rec *cmd = NULL;
  
-  for (cnt=0; cnt < conn_cache->nelts; cnt++) {
-    entry = ((conn_entry_t **) conn_cache->elts)[cnt];
+  for (i = 0; i < conn_cache->nelts; i++) {
+    entry = ((conn_entry_t **) conn_cache->elts)[i];
 
     if (entry->timer == p2) {
       sql_log(DEBUG_INFO, "timer expired for connection '%s'", entry->name);
@@ -313,7 +312,7 @@
   /* set up our timer if necessary */
   if (entry->ttl > 0) {
     entry->timer = pr_timer_add(entry->ttl, -1, &sql_postgres_module,
-      _sql_timer_callback);
+      sql_timer_cb);
     sql_log(DEBUG_INFO, "connection '%s' - %d second timer started",
       entry->name, entry->ttl);
 
@@ -1102,6 +1101,7 @@
 MODRET cmd_escapestring(cmd_rec * cmd) {
   conn_entry_t *entry = NULL;
   db_conn_t *conn = NULL;
+  modret_t *cmr = NULL;
   char *unescaped = NULL;
   char *escaped = NULL;
 
@@ -1124,6 +1124,13 @@
 
   conn = (db_conn_t *) entry->data;
 
+  /* Make sure the connection is open. */
+  cmr = cmd_open(cmd);
+  if (MODRET_ERROR(cmr)) {
+    sql_log(DEBUG_FUNC, "%s", "existing \tpostgres cmd_escapestring");
+    return cmr;
+  }
+
   /* Note: the PQescapeString() function appeared in the C API as of
    * Postgres-7.2.
    */
