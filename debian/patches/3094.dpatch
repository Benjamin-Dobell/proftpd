#! /bin/sh /usr/share/dpatch/dpatch-run
## 3094.dpatch by Francesco Paolo Lovergine <frankie@debian.org>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: No description.

@DPATCH@
diff -urNad trunk~/contrib/mod_tls.c trunk/contrib/mod_tls.c
--- trunk~/contrib/mod_tls.c	2008-09-08 11:31:12.000000000 +0200
+++ trunk/contrib/mod_tls.c	2008-09-08 11:32:06.000000000 +0200
@@ -410,6 +410,8 @@
 /* SSL/TLS support functions */
 static void tls_closelog(void);
 static void tls_end_sess(SSL *, int, int);
+#define TLS_SHUTDOWN_BIDIRECTIONAL	0x0001
+
 static void tls_fatal_error(int, int);
 static const char *tls_get_errors(void);
 static char *tls_get_page(size_t, void **);
@@ -1109,7 +1111,7 @@
     } else if (tls_renegotiate_required) {
       tls_log("%s", "requested TLS renegotiation timed out on control channel");
       tls_log("%s", "shutting down control channel TLS session");
-      tls_end_sess(ctrl_ssl, PR_NETIO_STRM_CTRL, TRUE);
+      tls_end_sess(ctrl_ssl, PR_NETIO_STRM_CTRL, 0);
       tls_ctrl_rd_nstrm->strm_data = tls_ctrl_wr_nstrm->strm_data =
         ctrl_ssl = NULL;
     }
@@ -1125,8 +1127,7 @@
     } else if (tls_renegotiate_required) {
       tls_log("%s", "requested TLS renegotiation timed out on data channel");
       tls_log("%s", "shutting down data channel TLS session");
-      tls_end_sess((SSL *) tls_data_wr_nstrm->strm_data, PR_NETIO_STRM_DATA,
-        TRUE);
+      tls_end_sess((SSL *) tls_data_wr_nstrm->strm_data, PR_NETIO_STRM_DATA, 0);
       tls_data_rd_nstrm->strm_data = tls_data_wr_nstrm->strm_data = NULL;
     }
   }
@@ -1697,8 +1698,7 @@
 
     if (tls_handshake_timed_out) {
       tls_log("TLS negotiation timed out (%u seconds)", tls_handshake_timeout);
-      tls_end_sess(ssl, on_data ? PR_NETIO_STRM_DATA : PR_NETIO_STRM_CTRL,
-        TRUE);
+      tls_end_sess(ssl, on_data ? PR_NETIO_STRM_DATA : PR_NETIO_STRM_CTRL, 0);
       return -4;
     }
 
@@ -1744,8 +1744,7 @@
         break;
     }
 
-    tls_end_sess(ssl, on_data ? PR_NETIO_STRM_DATA : PR_NETIO_STRM_CTRL,
-      TRUE);
+    tls_end_sess(ssl, on_data ? PR_NETIO_STRM_DATA : PR_NETIO_STRM_CTRL, 0);
     return -3;
   }
 
@@ -1855,42 +1854,34 @@
   }
 }
 
-static void tls_end_sess(SSL *ssl, int strms, int use_shutdown) {
-  int res;
+static void tls_end_sess(SSL *ssl, int strms, int flags) {
+  int res = 0;
   int shutdown_state;
 
   if (!ssl)
     return;
 
-  res = SSL_shutdown(ssl);
-  if (res == 0) {
-    if (use_shutdown) {
-      /* Try calling SSL_shutdown() again.  First, though, send a TCP FIN
-       * to trigger the remote end's close_notify SSL message, via shutdown().
-       */
-      if (strms & PR_NETIO_STRM_CTRL) {
-        pr_netio_shutdown(session.c->outstrm, 1);
+  /* A 'close_notify' alert (SSL shutdown message) may have been previously
+   * sent to the client via tls_netio_shutdown_cb().
+   */
 
-        if (session.c->instrm != session.c->outstrm)
-          pr_netio_shutdown(session.c->instrm, 1);
-      }
+  shutdown_state = SSL_get_shutdown(ssl);
+  if (!(shutdown_state & SSL_SENT_SHUTDOWN)) {
+    /* 'close_notify' not already sent; send it now. */
+    res = SSL_shutdown(ssl);
+  }
 
-      if (strms & PR_NETIO_STRM_DATA) {
-        pr_netio_shutdown(session.d->outstrm, 1);
+  if (res == 0) {
+    /* Now call SSL_shutdown() again, but only if necessary. */
+    if (flags & TLS_SHUTDOWN_BIDIRECTIONAL) {
+      shutdown_state = SSL_get_shutdown(ssl);
 
-        if (session.d->instrm != session.d->outstrm)
-          pr_netio_shutdown(session.d->instrm, 1);
+      res = 1;
+      if (!(shutdown_state & SSL_RECEIVED_SHUTDOWN)) {
+        res = SSL_shutdown(ssl);
       }
     }
 
-    shutdown_state = SSL_get_shutdown(ssl);
-
-    /* Now call SSL_shutdown() again, but only if necessary. */
-    res = 1;
-    if (!(shutdown_state & SSL_RECEIVED_SHUTDOWN)) {
-      res = SSL_shutdown(ssl);
-    }
-
     if (res == 0) {
       int err = SSL_get_error(ssl, res);
 
@@ -1917,7 +1908,8 @@
           if (errno != 0 &&
               errno != EOF &&
               errno != EBADF &&
-              errno != EPIPE) {
+              errno != EPIPE &&
+              errno != EPERM) {
             tls_log("SSL_shutdown syscall error: %s", strerror(errno));
             pr_log_debug(DEBUG0, MOD_TLS_VERSION
               ": SSL_shutdown syscall error: %s", strerror(errno));
@@ -3069,7 +3061,7 @@
 
     if (nstrm->strm_type == PR_NETIO_STRM_CTRL &&
         nstrm->strm_mode == PR_NETIO_IO_WR) {
-      tls_end_sess((SSL *) nstrm->strm_data, nstrm->strm_type, TRUE);
+      tls_end_sess((SSL *) nstrm->strm_data, nstrm->strm_type, 0);
       tls_ctrl_rd_nstrm->strm_data = tls_ctrl_wr_nstrm->strm_data =
         nstrm->strm_data = NULL;
       tls_ctrl_netio = NULL;
@@ -3078,7 +3070,7 @@
 
     if (nstrm->strm_type == PR_NETIO_STRM_DATA &&
         nstrm->strm_mode == PR_NETIO_IO_WR) {
-      tls_end_sess((SSL *) nstrm->strm_data, nstrm->strm_type, TRUE);
+      tls_end_sess((SSL *) nstrm->strm_data, nstrm->strm_type, 0);
       tls_data_rd_nstrm->strm_data = tls_data_wr_nstrm->strm_data =
         nstrm->strm_data = NULL;
       tls_data_netio = NULL;
@@ -3189,7 +3181,7 @@
           X509_free(data_cert);
 
           /* Properly shutdown the SSL session. */
-          tls_end_sess((SSL *) nstrm->strm_data, nstrm->strm_type, TRUE);
+          tls_end_sess((SSL *) nstrm->strm_data, nstrm->strm_type, 0);
 
           tls_data_rd_nstrm->strm_data = tls_data_wr_nstrm->strm_data =
             nstrm->strm_data = NULL;
@@ -3245,6 +3237,28 @@
 }
 
 static int tls_netio_shutdown_cb(pr_netio_stream_t *nstrm, int how) {
+
+  if (how != 0) {
+    /* Closing this stream for writing; we need to send the 'close_notify'
+     * alert first, so that the client knows, at the application layer,
+     * that the SSL/TLS session is shutting down.
+     */
+
+    if (nstrm->strm_mode == PR_NETIO_IO_WR &&
+        (nstrm->strm_type == PR_NETIO_STRM_CTRL ||
+         nstrm->strm_type == PR_NETIO_STRM_DATA)) {
+      SSL *ssl;
+
+      ssl = (SSL *) nstrm->strm_data;
+      if (ssl) {
+        if (!(SSL_get_shutdown(ssl) & SSL_SENT_SHUTDOWN)) {
+          /* We haven't sent a 'close_notify' alert yet; do so now. */
+          SSL_shutdown(ssl);
+        }
+      }
+    }
+  }
+
   return shutdown(nstrm->strm_fd, how);
 }
 
@@ -3664,7 +3678,7 @@
    * The data channel, if protected, should remain so.
    */
 
-  tls_end_sess(ctrl_ssl, PR_NETIO_STRM_CTRL, FALSE);
+  tls_end_sess(ctrl_ssl, PR_NETIO_STRM_CTRL, TLS_SHUTDOWN_BIDIRECTIONAL);
   ctrl_ssl = tls_ctrl_rd_nstrm->strm_data = tls_ctrl_wr_nstrm->strm_data = NULL;
 
   /* Remove our NetIO for the control channel. */
