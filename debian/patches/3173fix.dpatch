#! /bin/sh /usr/share/dpatch/dpatch-run
## 3176.dpatch by Francesco Paolo Lovergine <frankie@debian.org>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: No description.

@DPATCH@
diff -urNad 1.3.1~/contrib/mod_sql_postgres.c 1.3.1/contrib/mod_sql_postgres.c
--- 1.3.1~/contrib/mod_sql_postgres.c	2009-02-24 12:31:47.000000000 +0100
+++ 1.3.1/contrib/mod_sql_postgres.c	2009-02-24 12:32:18.000000000 +0100
@@ -1152,6 +1152,8 @@
   modret_t *cmr = NULL;
   char *unescaped = NULL;
   char *escaped = NULL;
+  int pgerr = 0;
+  size_t unescaped_len = 0;
 
   sql_log(DEBUG_FUNC, "%s", "entering \tpostgres cmd_escapestring");
 
@@ -1179,14 +1181,23 @@
     return cmr;
   }
 
-  /* Note: the PQescapeString() function appeared in the C API as of
-   * Postgres-7.2.
+  /* Note: I think PQescapeStringConn() appears in the C API as of
+   * Postgres-7.3, but I'm not sure.  The PQescapeString() function appeared
+   * in the C API as of Postgres-7.2.  The PG_VERSION_NUM macro appeared
+   * as of Postgres-8.2, hence why that is used as the proxy indicator of
+   * whether to use PQescapeString() or PQescapeStringConn().
    */
+
   unescaped = cmd->argv[1];
+  unescaped_len = strlen(unescaped);
   escaped = (char *) pcalloc(cmd->tmp_pool, sizeof(char) *
-    (strlen(unescaped) * 2) + 1);
+    (unescaped_len * 2) + 1);
 
-  PQescapeString(escaped, unescaped, strlen(unescaped));
+  PQescapeStringConn(conn->postgres, escaped, unescaped, unescaped_len, &pgerr);
+  if (pgerr != 0) {
+    sql_log(DEBUG_FUNC, "%s", "exiting \tpostgres cmd_escapestring");
+    return _build_error(cmd, conn);
+  }
 
   sql_log(DEBUG_FUNC, "%s", "exiting \tpostgres cmd_escapestring");
   return mod_create_data(cmd, (void *) escaped);
