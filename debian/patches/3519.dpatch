#! /bin/sh /usr/share/dpatch/dpatch-run
## 3519.dpatch by Francesco Paolo Lovergine <frankie@debian.org>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: No description.

@DPATCH@
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' proftpd-dfsg-1.3.1~/contrib/mod_site_misc.c proftpd-dfsg-1.3.1/contrib/mod_site_misc.c
--- proftpd-dfsg-1.3.1~/contrib/mod_site_misc.c	2011-01-13 14:43:04.000000000 +0100
+++ proftpd-dfsg-1.3.1/contrib/mod_site_misc.c	2011-01-15 16:36:59.000000000 +0100
@@ -81,18 +81,22 @@
 
 static int site_misc_create_path(pool *p, const char *path) {
   struct stat st;
-  char *curr_path, *dup_path;
+  char *curr_path, *tmp_path;
 
   pr_fs_clear_cache();
 
   if (pr_fsio_stat(path, &st) == 0)
     return 0;
 
-  dup_path = pstrdup(p, path);
-  curr_path = session.cwd;
- 
-  while (dup_path && *dup_path) {
-    char *curr_dir = strsep(&dup_path, "/");
+  /* The given path should already be canonicalized; we do not need to worry
+   * if it is relative to the current working directory or not.
+   */
+
+  tmp_path = pstrdup(p, path);
+
+  curr_path = "/";
+  while (tmp_path && *tmp_path) {
+    char *curr_dir = strsep(&tmp_path, "/");
  
     curr_path = pdircat(p, curr_path, curr_dir, NULL);
    
@@ -186,7 +190,7 @@
 
   if (strcasecmp(cmd->argv[1], "MKDIR") == 0) {
     register unsigned int i;
-    char *path = "";
+    char *cmd_name,*path = "";
     unsigned char *authenticated;
 
     if (cmd->argc < 3)
@@ -209,7 +213,17 @@
       return PR_ERROR(cmd);
     }
 
-    if (!dir_check(cmd->tmp_pool, "SITE_MKDIR", G_WRITE, path, NULL)) {
+    path = dir_canonical_path(cmd->tmp_pool, path);
+    if (path == NULL) {
+      pr_response_add_err(R_550, "%s: %s", cmd->arg, strerror(EINVAL));
+      return PR_ERROR(cmd);
+    }
+
+    cmd_name = cmd->argv[0];
+    cmd->argv[0] = "SITE MKDIR";
+    if (!dir_check_canon(cmd->tmp_pool, cmd, G_WRITE, path, NULL)) {
+      cmd->argv[0] = cmd_name;
+
       pr_response_add_err(R_550, "%s: %s", cmd->arg, strerror(EPERM));
       return PR_ERROR(cmd);
     }
@@ -235,7 +249,7 @@
 
   if (strcasecmp(cmd->argv[1], "RMDIR") == 0) {
     register unsigned int i;
-    char *path = "";
+    char cmd_name,*path = "";
     unsigned char *authenticated;
 
     if (cmd->argc < 3)
@@ -253,7 +267,17 @@
 
     path = pr_fs_decode_path(cmd->tmp_pool, path);
 
-    if (!dir_check(cmd->tmp_pool, "SITE_RMDIR", G_WRITE, path, NULL)) {
+    path = dir_canonical_path(cmd->tmp_pool, path);
+    if (path == NULL) {
+      pr_response_add_err(R_550, "%s: %s", cmd->arg, strerror(EINVAL));
+      return PR_ERROR(cmd);
+    }
+
+    cmd_name = cmd->argv[0];
+    cmd->argv[0] = "SITE_RMDIR";
+    if (!dir_check_canon(cmd->tmp_pool, cmd, G_WRITE, path, NULL)) {
+      cmd->argv[0] = cmd_name;
+
       pr_response_add_err(R_550, "%s: %s", cmd->arg, strerror(EPERM));
       return PR_ERROR(cmd);
     }
@@ -278,7 +302,7 @@
     return PR_DECLINED(cmd);
 
   if (strcasecmp(cmd->argv[1], "SYMLINK") == 0) {
-    char *src, *dst;
+    char *cmd_name, *src, *dst;
     unsigned char *authenticated;
 
     if (cmd->argc < 4)
@@ -292,15 +316,31 @@
     }
 
     src = pr_fs_decode_path(cmd->tmp_pool, cmd->argv[2]);
+    src = dir_canonical_path(cmd->tmp_pool, src);
+    if (src == NULL) {
+      pr_response_add_err(R_550, "%s: %s", cmd->arg, strerror(EINVAL));
+      return PR_ERROR(cmd);
+    }
+
+    cmd_name = cmd->argv[0];
+    cmd->argv[0] = "SITE_SYMLINK";
+    if (!dir_check_canon(cmd->tmp_pool, cmd, G_READ, src, NULL)) {
+      cmd->argv[0] = cmd_name;
 
-    if (!dir_check(cmd->tmp_pool, "SITE_SYMLINK", G_WRITE, src, NULL)) {
       pr_response_add_err(R_550, "%s: %s", cmd->arg[2], strerror(EPERM));
       return PR_ERROR(cmd);
     }
 
     dst = pr_fs_decode_path(cmd->tmp_pool, cmd->argv[3]);
+    dst = dir_canonical_path(cmd->tmp_pool, dst);
+    if (dst == NULL) {
+      pr_response_add_err(R_550, "%s: %s", cmd->arg, strerror(EINVAL));
+      return PR_ERROR(cmd);
+    }
+
+    if (!dir_check_canon(cmd->tmp_pool, cmd, G_WRITE, dst, NULL)) {
+      cmd->argv[0] = cmd_name;
 
-    if (!dir_check(cmd->tmp_pool, "SITE_SYMLINK", G_WRITE, dst, NULL)) {
       pr_response_add_err(R_550, "%s: %s", cmd->arg[3], strerror(EPERM));
       return PR_ERROR(cmd);
     }
@@ -331,7 +371,7 @@
 
   if (strcasecmp(cmd->argv[1], "UTIME") == 0) {
     register unsigned int i;
-    char c, *p, *path = "";
+    char c, *cmd_name, *p, *path = "";
     unsigned int year, month, day, hour, min;
     struct utimbuf tmbuf;
     unsigned char *authenticated;
@@ -355,8 +395,18 @@
       path = pstrcat(cmd->tmp_pool, path, *path ? " " : "", cmd->argv[i], NULL);
 
     path = pr_fs_decode_path(cmd->tmp_pool, path);
+ 
+    path = dir_canonical_path(cmd->tmp_pool, path);
+    if (path == NULL) {
+      pr_response_add_err(R_550, "%s: %s", cmd->arg, strerror(EINVAL));
+      return PR_ERROR(cmd);
+    }
+
+    cmd_name = cmd->argv[0];
+    cmd->argv[0] = "SITE_UTIME";
+    if (!dir_check_canon(cmd->tmp_pool, cmd, G_WRITE, path, NULL)) {
+      cmd->argv[0] = cmd_name;
 
-    if (!dir_check(cmd->tmp_pool, "SITE_UTIME", G_WRITE, path, NULL)) {
       pr_response_add_err(R_550, "%s: %s", cmd->arg, strerror(EPERM));
       return PR_ERROR(cmd);
     }
