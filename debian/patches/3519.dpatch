#! /bin/sh /usr/share/dpatch/dpatch-run
## 3519.dpatch by Francesco Paolo Lovergine <frankie@debian.org>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: No description.

@DPATCH@
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' proftpd-dfsg~/contrib/mod_site_misc.c proftpd-dfsg/contrib/mod_site_misc.c
--- proftpd-dfsg~/contrib/mod_site_misc.c	2010-09-13 15:38:16.000000000 +0200
+++ proftpd-dfsg/contrib/mod_site_misc.c	2010-10-22 12:19:52.000000000 +0200
@@ -81,27 +81,32 @@
 
 static int site_misc_create_path(pool *p, const char *path) {
   struct stat st;
-  char *curr_path, *dup_path;
+  char *curr_path, *tmp_path;
 
   pr_fs_clear_cache();
 
   if (pr_fsio_stat(path, &st) == 0)
     return 0;
 
-  dup_path = pstrdup(p, path);
-  curr_path = session.cwd;
- 
-  while (dup_path &&
-         *dup_path) {
+  /* The given path should already be canonicalized; we do not need to worry
+   * if it is relative to the current working directory or not.
+   */
+
+  tmp_path = pstrdup(p, path);
+
+  curr_path = "/";
+  while (tmp_path &&
+         *tmp_path) {
     char *curr_dir;
 
     pr_signals_handle();
 
-    curr_dir = strsep(&dup_path, "/");
+    curr_dir = strsep(&tmp_path, "/");
     curr_path = pdircat(p, curr_path, curr_dir, NULL);
-   
-    if (site_misc_create_dir(curr_path) < 0)
+
+    if (site_misc_create_dir(curr_path) < 0) {
       return -1;
+    }
   }
  
   return 0;
@@ -277,10 +282,19 @@
       return PR_ERROR(cmd);
     }
 
+    path = dir_canonical_path(cmd->tmp_pool, path);
+    if (path == NULL) {
+      pr_response_add_err(R_550, "%s: %s", cmd->arg, strerror(EINVAL));
+      return PR_ERROR(cmd);
+    }
+
     cmd_name = cmd->argv[0];
     cmd->argv[0] = "SITE_MKDIR";
-    if (!dir_check(cmd->tmp_pool, cmd, G_WRITE, path, NULL)) {
+    if (!dir_check_canon(cmd->tmp_pool, cmd, G_WRITE, path, NULL)) {
       cmd->argv[0] = cmd_name;
+
+      pr_log_debug(DEBUG4, MOD_SITE_MISC_VERSION
+        ": %s command denied by <Limit>", cmd->argv[0]);
       pr_response_add_err(R_550, "%s: %s", cmd->arg, strerror(EPERM));
       return PR_ERROR(cmd);
     }
@@ -324,11 +338,19 @@
       path = pstrcat(cmd->tmp_pool, path, *path ? " " : "", cmd->argv[i], NULL);
 
     path = pr_fs_decode_path(cmd->tmp_pool, path);
+    path = dir_canonical_path(cmd->tmp_pool, path);
+    if (path == NULL) {
+      pr_response_add_err(R_550, "%s: %s", cmd->arg, strerror(EINVAL));
+      return PR_ERROR(cmd);
+    }
 
     cmd_name = cmd->argv[0];
     cmd->argv[0] = "SITE_RMDIR";
-    if (!dir_check(cmd->tmp_pool, cmd, G_WRITE, path, NULL)) {
+    if (!dir_check_canon(cmd->tmp_pool, cmd, G_WRITE, path, NULL)) {
       cmd->argv[0] = cmd_name;
+
+      pr_log_debug(DEBUG4, MOD_SITE_MISC_VERSION
+        ": %s command denied by <Limit>", cmd->argv[0]);
       pr_response_add_err(R_550, "%s: %s", cmd->arg, strerror(EPERM));
       return PR_ERROR(cmd);
     }
@@ -370,19 +392,35 @@
     }
 
     src = pr_fs_decode_path(cmd->tmp_pool, cmd->argv[2]);
+    src = dir_canonical_path(cmd->tmp_pool, src);
+    if (src == NULL) {
+      pr_response_add_err(R_550, "%s: %s", cmd->arg, strerror(EINVAL));
+      return PR_ERROR(cmd);
+    }
 
     cmd_name = cmd->argv[0];
     cmd->argv[0] = "SITE_SYMLINK";
-    if (!dir_check(cmd->tmp_pool, cmd, G_READ, src, NULL)) {
+    if (!dir_check_canon(cmd->tmp_pool, cmd, G_READ, src, NULL)) {
       cmd->argv[0] = cmd_name;
+
+      pr_log_debug(DEBUG4, MOD_SITE_MISC_VERSION
+        ": %s command denied by <Limit>", cmd->argv[0]);
       pr_response_add_err(R_550, "%s: %s", cmd->argv[2], strerror(EPERM));
       return PR_ERROR(cmd);
     }
 
     dst = pr_fs_decode_path(cmd->tmp_pool, cmd->argv[3]);
+    dst = dir_canonical_path(cmd->tmp_pool, dst);
+    if (dst == NULL) {
+      pr_response_add_err(R_550, "%s: %s", cmd->arg, strerror(EINVAL));
+      return PR_ERROR(cmd);
+    }
 
-    if (!dir_check(cmd->tmp_pool, cmd, G_WRITE, dst, NULL)) {
+    if (!dir_check_canon(cmd->tmp_pool, cmd, G_WRITE, dst, NULL)) {
       cmd->argv[0] = cmd_name;
+
+      pr_log_debug(DEBUG4, MOD_SITE_MISC_VERSION
+        ": %s command denied by <Limit>", cmd->argv[0]);
       pr_response_add_err(R_550, "%s: %s", cmd->argv[3], strerror(EPERM));
       return PR_ERROR(cmd);
     }
@@ -463,10 +501,19 @@
 
     path = pr_fs_decode_path(cmd->tmp_pool, path);
 
+    path = dir_canonical_path(cmd->tmp_pool, path);
+    if (path == NULL) {
+      pr_response_add_err(R_550, "%s: %s", cmd->arg, strerror(EINVAL));
+      return PR_ERROR(cmd);
+    }
+
     cmd_name = cmd->argv[0];
     cmd->argv[0] = "SITE_UTIME";
-    if (!dir_check(cmd->tmp_pool, cmd, G_WRITE, path, NULL)) {
+    if (!dir_check_canon(cmd->tmp_pool, cmd, G_WRITE, path, NULL)) {
       cmd->argv[0] = cmd_name;
+
+      pr_log_debug(DEBUG4, MOD_SITE_MISC_VERSION
+        ": %s command denied by <Limit>", cmd->argv[0]);
       pr_response_add_err(R_550, "%s: %s", cmd->arg, strerror(EPERM));
       return PR_ERROR(cmd);
     }
