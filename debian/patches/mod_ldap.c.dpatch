#! /bin/sh /usr/share/dpatch/dpatch-run
## mod_ldap.c.dpatch by Francesco Paolo Lovergine <frankie@debian.org>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: No description.

@DPATCH@
diff -urNad trunk~/contrib/mod_ldap.c trunk/contrib/mod_ldap.c
--- trunk~/contrib/mod_ldap.c	2008-08-08 15:52:03.000000000 +0200
+++ trunk/contrib/mod_ldap.c	2008-08-08 15:52:47.000000000 +0200
@@ -88,6 +88,8 @@
 #include <unistd.h>    /* seteuid()   */
 
 #include <lber.h>
+
+#define LDAP_DEPRECATED 1
 #include <ldap.h>
 
 #if LDAP_API_VERSION >= 2000
@@ -1562,12 +1564,9 @@
     if (url->lud_filter && strcmp(url->lud_filter, "") != 0) {
       CONF_ERROR(cmd, "A base DN may not be specified by an LDAPServer URL, only by LDAPDoAuth, LDAPDoUIDLookups, LDAPDoGIDLookups, or LDAPDoQuotaLookups.");
     }
-
-    add_config_param_str(cmd->argv[0], 2, "url", url);
-  } else {
-    add_config_param_str(cmd->argv[0], 2, "host", cmd->argv[1]);
   }
 
+  add_config_param_str(cmd->argv[0], 1, cmd->argv[1]);
   return PR_HANDLED(cmd);
 }
 
@@ -2245,38 +2244,34 @@
    * ldap_init() will connect to the LDAP SDK's default.
    */
   if ((c = find_config(main_server->conf, CONF_PARAM, "LDAPServer", FALSE)) != NULL) {
-    if (strcmp(c->argv[0], "url") == 0) {
-      url = c->argv[1];
-      if (url) {
+    if (ldap_is_ldap_url(c->argv[0])) {
+      if (ldap_url_parse(c->argv[0], &url) != LDAP_SUCCESS) {
+        pr_log_pri(PR_LOG_ERR, MOD_LDAP_VERSION ": ldap_getconf(): url %s was valid during ProFTPD startup, but is no longer valid?!", (char *)c->argv[0]);
+        return -1;
+      }
+
 #ifdef LDAP_OPT_X_TLS_HARD
-        if (strcmp(url->lud_scheme, "ldaps") == 0) {
-          ldap_use_ssl = 1;
-        }
+      if (strcmp(url->lud_scheme, "ldaps") == 0) {
+        ldap_use_ssl = 1;
+      }
 #endif /* LDAP_OPT_X_TLS_HARD */
 
-        if (url->lud_host != NULL) {
-          ldap_server = pstrdup(session.pool, url->lud_host);
-        }
-        if (url->lud_port != 0) {
-          ldap_port = url->lud_port;
-        }
-        if (url->lud_scope != LDAP_SCOPE_DEFAULT) {
-          ldap_search_scope = url->lud_scope;
-        }
-
-        /* We intentionally avoid ldap_free_urldesc()ing url, since it's
-         * attached to the LDAPServer configuration directive and will be used
-         * by other/future callers.
-         */
+      if (url->lud_host != NULL) {
+        ldap_server = pstrdup(session.pool, url->lud_host);
       }
-    } else if (strcmp(c->argv[0], "host") == 0) {
-      ldap_server = c->argv[1];
-    } else {
-      /* This should never happen, since the configuration handler for
-       * LDAPServer only passes url or host, but we'll be defensive.
+      if (url->lud_port != 0) {
+        ldap_port = url->lud_port;
+      }
+      if (url->lud_scope != LDAP_SCOPE_DEFAULT) {
+        ldap_search_scope = url->lud_scope;
+      }
+
+      /* We intentionally avoid ldap_free_urldesc()ing url, since it's
+       * attached to the LDAPServer configuration directive and will be used
+       * by other/future callers.
        */
-      pr_log_pri(PR_LOG_ERR, MOD_LDAP_VERSION ": unexpected LDAPServer type.");
-      return -1;
+    } else {
+      ldap_server = c->argv[0];
     }
   }
 
